// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_auth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_auth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_auth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_auth_2eproto;
namespace auth_protocol {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class ResponseError;
class ResponseErrorDefaultTypeInternal;
extern ResponseErrorDefaultTypeInternal _ResponseError_default_instance_;
class ResponseOK;
class ResponseOKDefaultTypeInternal;
extern ResponseOKDefaultTypeInternal _ResponseOK_default_instance_;
}  // namespace auth_protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::auth_protocol::Request* Arena::CreateMaybeMessage<::auth_protocol::Request>(Arena*);
template<> ::auth_protocol::ResponseError* Arena::CreateMaybeMessage<::auth_protocol::ResponseError>(Arena*);
template<> ::auth_protocol::ResponseOK* Arena::CreateMaybeMessage<::auth_protocol::ResponseOK>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace auth_protocol {

enum Action : int {
  SIGN_UP = 0,
  LOGIN = 1
};
bool Action_IsValid(int value);
constexpr Action Action_MIN = SIGN_UP;
constexpr Action Action_MAX = LOGIN;
constexpr int Action_ARRAYSIZE = Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor();
template<typename T>
inline const std::string& Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Action_descriptor(), enum_t_value);
}
inline bool Action_Parse(
    const std::string& name, Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Action>(
    Action_descriptor(), name, value);
}
enum Error : int {
  REPEATED_USERNAME = 0,
  INVALID_CREDENTIALS = 1,
  INTERNAL_SERVER_ERROR = 2
};
bool Error_IsValid(int value);
constexpr Error Error_MIN = REPEATED_USERNAME;
constexpr Error Error_MAX = INTERNAL_SERVER_ERROR;
constexpr int Error_ARRAYSIZE = Error_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_descriptor();
template<typename T>
inline const std::string& Error_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_descriptor(), enum_t_value);
}
inline bool Error_Parse(
    const std::string& name, Error* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error>(
    Error_descriptor(), name, value);
}
// ===================================================================

class Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth_protocol.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth_protocol.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kPlaintextPasswordFieldNumber = 4,
    kLengthFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // required string username = 3;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required string plaintextPassword = 4;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  void set_plaintextpassword(const std::string& value);
  void set_plaintextpassword(std::string&& value);
  void set_plaintextpassword(const char* value);
  void set_plaintextpassword(const char* value, size_t size);
  std::string* mutable_plaintextpassword();
  std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // required int32 length = 1;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .auth_protocol.Action action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::auth_protocol::Action action() const;
  void set_action(::auth_protocol::Action value);
  private:
  ::auth_protocol::Action _internal_action() const;
  void _internal_set_action(::auth_protocol::Action value);
  public:

  // @@protoc_insertion_point(class_scope:auth_protocol.Request)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  int action_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class ResponseError :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth_protocol.ResponseError) */ {
 public:
  ResponseError();
  virtual ~ResponseError();

  ResponseError(const ResponseError& from);
  ResponseError(ResponseError&& from) noexcept
    : ResponseError() {
    *this = ::std::move(from);
  }

  inline ResponseError& operator=(const ResponseError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseError& operator=(ResponseError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseError* internal_default_instance() {
    return reinterpret_cast<const ResponseError*>(
               &_ResponseError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseError& a, ResponseError& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseError* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseError* New() const final {
    return CreateMaybeMessage<ResponseError>(nullptr);
  }

  ResponseError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseError& from);
  void MergeFrom(const ResponseError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth_protocol.ResponseError";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kErrorFieldNumber = 4,
    kLengthFieldNumber = 1,
    kActionFieldNumber = 2,
    kVilchisFieldNumber = 5,
  };
  // required string username = 3;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required string error = 4;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // required int32 length = 1;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .auth_protocol.Action action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::auth_protocol::Action action() const;
  void set_action(::auth_protocol::Action value);
  private:
  ::auth_protocol::Action _internal_action() const;
  void _internal_set_action(::auth_protocol::Action value);
  public:

  // required bool vilchis = 5;
  bool has_vilchis() const;
  private:
  bool _internal_has_vilchis() const;
  public:
  void clear_vilchis();
  bool vilchis() const;
  void set_vilchis(bool value);
  private:
  bool _internal_vilchis() const;
  void _internal_set_vilchis(bool value);
  public:

  // @@protoc_insertion_point(class_scope:auth_protocol.ResponseError)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  int action_;
  bool vilchis_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class ResponseOK :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth_protocol.ResponseOK) */ {
 public:
  ResponseOK();
  virtual ~ResponseOK();

  ResponseOK(const ResponseOK& from);
  ResponseOK(ResponseOK&& from) noexcept
    : ResponseOK() {
    *this = ::std::move(from);
  }

  inline ResponseOK& operator=(const ResponseOK& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseOK& operator=(ResponseOK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseOK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseOK* internal_default_instance() {
    return reinterpret_cast<const ResponseOK*>(
               &_ResponseOK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResponseOK& a, ResponseOK& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseOK* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseOK* New() const final {
    return CreateMaybeMessage<ResponseOK>(nullptr);
  }

  ResponseOK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseOK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseOK& from);
  void MergeFrom(const ResponseOK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseOK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth_protocol.ResponseOK";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kLengthFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // required string username = 3;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required int32 length = 1;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .auth_protocol.Action action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::auth_protocol::Action action() const;
  void set_action(::auth_protocol::Action value);
  private:
  ::auth_protocol::Action _internal_action() const;
  void _internal_set_action(::auth_protocol::Action value);
  public:

  // @@protoc_insertion_point(class_scope:auth_protocol.ResponseOK)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  int action_;
  friend struct ::TableStruct_auth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// required int32 length = 1;
inline bool Request::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request::has_length() const {
  return _internal_has_length();
}
inline void Request::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::length() const {
  // @@protoc_insertion_point(field_get:auth_protocol.Request.length)
  return _internal_length();
}
inline void Request::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  length_ = value;
}
inline void Request::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:auth_protocol.Request.length)
}

// required .auth_protocol.Action action = 2;
inline bool Request::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Request::has_action() const {
  return _internal_has_action();
}
inline void Request::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::auth_protocol::Action Request::_internal_action() const {
  return static_cast< ::auth_protocol::Action >(action_);
}
inline ::auth_protocol::Action Request::action() const {
  // @@protoc_insertion_point(field_get:auth_protocol.Request.action)
  return _internal_action();
}
inline void Request::_internal_set_action(::auth_protocol::Action value) {
  assert(::auth_protocol::Action_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  action_ = value;
}
inline void Request::set_action(::auth_protocol::Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:auth_protocol.Request.action)
}

// required string username = 3;
inline bool Request::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request::has_username() const {
  return _internal_has_username();
}
inline void Request::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request::username() const {
  // @@protoc_insertion_point(field_get:auth_protocol.Request.username)
  return _internal_username();
}
inline void Request::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:auth_protocol.Request.username)
}
inline std::string* Request::mutable_username() {
  // @@protoc_insertion_point(field_mutable:auth_protocol.Request.username)
  return _internal_mutable_username();
}
inline const std::string& Request::_internal_username() const {
  return username_.GetNoArena();
}
inline void Request::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth_protocol.Request.username)
}
inline void Request::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth_protocol.Request.username)
}
inline void Request::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth_protocol.Request.username)
}
inline std::string* Request::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_username() {
  // @@protoc_insertion_point(field_release:auth_protocol.Request.username)
  if (!has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:auth_protocol.Request.username)
}

// required string plaintextPassword = 4;
inline bool Request::_internal_has_plaintextpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void Request::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Request::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:auth_protocol.Request.plaintextPassword)
  return _internal_plaintextpassword();
}
inline void Request::set_plaintextpassword(const std::string& value) {
  _internal_set_plaintextpassword(value);
  // @@protoc_insertion_point(field_set:auth_protocol.Request.plaintextPassword)
}
inline std::string* Request::mutable_plaintextpassword() {
  // @@protoc_insertion_point(field_mutable:auth_protocol.Request.plaintextPassword)
  return _internal_mutable_plaintextpassword();
}
inline const std::string& Request::_internal_plaintextpassword() const {
  return plaintextpassword_.GetNoArena();
}
inline void Request::_internal_set_plaintextpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request::set_plaintextpassword(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth_protocol.Request.plaintextPassword)
}
inline void Request::set_plaintextpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth_protocol.Request.plaintextPassword)
}
inline void Request::set_plaintextpassword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth_protocol.Request.plaintextPassword)
}
inline std::string* Request::_internal_mutable_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:auth_protocol.Request.plaintextPassword)
  if (!has_plaintextpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpassword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword);
  // @@protoc_insertion_point(field_set_allocated:auth_protocol.Request.plaintextPassword)
}

// -------------------------------------------------------------------

// ResponseError

// required int32 length = 1;
inline bool ResponseError::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResponseError::has_length() const {
  return _internal_has_length();
}
inline void ResponseError::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseError::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseError::length() const {
  // @@protoc_insertion_point(field_get:auth_protocol.ResponseError.length)
  return _internal_length();
}
inline void ResponseError::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  length_ = value;
}
inline void ResponseError::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:auth_protocol.ResponseError.length)
}

// required .auth_protocol.Action action = 2;
inline bool ResponseError::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ResponseError::has_action() const {
  return _internal_has_action();
}
inline void ResponseError::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::auth_protocol::Action ResponseError::_internal_action() const {
  return static_cast< ::auth_protocol::Action >(action_);
}
inline ::auth_protocol::Action ResponseError::action() const {
  // @@protoc_insertion_point(field_get:auth_protocol.ResponseError.action)
  return _internal_action();
}
inline void ResponseError::_internal_set_action(::auth_protocol::Action value) {
  assert(::auth_protocol::Action_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  action_ = value;
}
inline void ResponseError::set_action(::auth_protocol::Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:auth_protocol.ResponseError.action)
}

// required string username = 3;
inline bool ResponseError::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResponseError::has_username() const {
  return _internal_has_username();
}
inline void ResponseError::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResponseError::username() const {
  // @@protoc_insertion_point(field_get:auth_protocol.ResponseError.username)
  return _internal_username();
}
inline void ResponseError::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:auth_protocol.ResponseError.username)
}
inline std::string* ResponseError::mutable_username() {
  // @@protoc_insertion_point(field_mutable:auth_protocol.ResponseError.username)
  return _internal_mutable_username();
}
inline const std::string& ResponseError::_internal_username() const {
  return username_.GetNoArena();
}
inline void ResponseError::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResponseError::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth_protocol.ResponseError.username)
}
inline void ResponseError::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth_protocol.ResponseError.username)
}
inline void ResponseError::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth_protocol.ResponseError.username)
}
inline std::string* ResponseError::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResponseError::release_username() {
  // @@protoc_insertion_point(field_release:auth_protocol.ResponseError.username)
  if (!has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseError::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:auth_protocol.ResponseError.username)
}

// required string error = 4;
inline bool ResponseError::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResponseError::has_error() const {
  return _internal_has_error();
}
inline void ResponseError::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResponseError::error() const {
  // @@protoc_insertion_point(field_get:auth_protocol.ResponseError.error)
  return _internal_error();
}
inline void ResponseError::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:auth_protocol.ResponseError.error)
}
inline std::string* ResponseError::mutable_error() {
  // @@protoc_insertion_point(field_mutable:auth_protocol.ResponseError.error)
  return _internal_mutable_error();
}
inline const std::string& ResponseError::_internal_error() const {
  return error_.GetNoArena();
}
inline void ResponseError::_internal_set_error(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResponseError::set_error(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth_protocol.ResponseError.error)
}
inline void ResponseError::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth_protocol.ResponseError.error)
}
inline void ResponseError::set_error(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth_protocol.ResponseError.error)
}
inline std::string* ResponseError::_internal_mutable_error() {
  _has_bits_[0] |= 0x00000002u;
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResponseError::release_error() {
  // @@protoc_insertion_point(field_release:auth_protocol.ResponseError.error)
  if (!has_error()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return error_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseError::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:auth_protocol.ResponseError.error)
}

// required bool vilchis = 5;
inline bool ResponseError::_internal_has_vilchis() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ResponseError::has_vilchis() const {
  return _internal_has_vilchis();
}
inline void ResponseError::clear_vilchis() {
  vilchis_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ResponseError::_internal_vilchis() const {
  return vilchis_;
}
inline bool ResponseError::vilchis() const {
  // @@protoc_insertion_point(field_get:auth_protocol.ResponseError.vilchis)
  return _internal_vilchis();
}
inline void ResponseError::_internal_set_vilchis(bool value) {
  _has_bits_[0] |= 0x00000010u;
  vilchis_ = value;
}
inline void ResponseError::set_vilchis(bool value) {
  _internal_set_vilchis(value);
  // @@protoc_insertion_point(field_set:auth_protocol.ResponseError.vilchis)
}

// -------------------------------------------------------------------

// ResponseOK

// required int32 length = 1;
inline bool ResponseOK::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResponseOK::has_length() const {
  return _internal_has_length();
}
inline void ResponseOK::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseOK::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseOK::length() const {
  // @@protoc_insertion_point(field_get:auth_protocol.ResponseOK.length)
  return _internal_length();
}
inline void ResponseOK::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  length_ = value;
}
inline void ResponseOK::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:auth_protocol.ResponseOK.length)
}

// required .auth_protocol.Action action = 2;
inline bool ResponseOK::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResponseOK::has_action() const {
  return _internal_has_action();
}
inline void ResponseOK::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::auth_protocol::Action ResponseOK::_internal_action() const {
  return static_cast< ::auth_protocol::Action >(action_);
}
inline ::auth_protocol::Action ResponseOK::action() const {
  // @@protoc_insertion_point(field_get:auth_protocol.ResponseOK.action)
  return _internal_action();
}
inline void ResponseOK::_internal_set_action(::auth_protocol::Action value) {
  assert(::auth_protocol::Action_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  action_ = value;
}
inline void ResponseOK::set_action(::auth_protocol::Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:auth_protocol.ResponseOK.action)
}

// required string username = 3;
inline bool ResponseOK::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResponseOK::has_username() const {
  return _internal_has_username();
}
inline void ResponseOK::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResponseOK::username() const {
  // @@protoc_insertion_point(field_get:auth_protocol.ResponseOK.username)
  return _internal_username();
}
inline void ResponseOK::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:auth_protocol.ResponseOK.username)
}
inline std::string* ResponseOK::mutable_username() {
  // @@protoc_insertion_point(field_mutable:auth_protocol.ResponseOK.username)
  return _internal_mutable_username();
}
inline const std::string& ResponseOK::_internal_username() const {
  return username_.GetNoArena();
}
inline void ResponseOK::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResponseOK::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth_protocol.ResponseOK.username)
}
inline void ResponseOK::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth_protocol.ResponseOK.username)
}
inline void ResponseOK::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth_protocol.ResponseOK.username)
}
inline std::string* ResponseOK::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResponseOK::release_username() {
  // @@protoc_insertion_point(field_release:auth_protocol.ResponseOK.username)
  if (!has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseOK::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:auth_protocol.ResponseOK.username)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auth_protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::auth_protocol::Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::auth_protocol::Action>() {
  return ::auth_protocol::Action_descriptor();
}
template <> struct is_proto_enum< ::auth_protocol::Error> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::auth_protocol::Error>() {
  return ::auth_protocol::Error_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
